db.movies.updateOne({ title: 'Fight Club' },{$set: { actors: ['Brad Pit', 'Edward Norton']} })

db.movies.insertOne({
title : 'Inglorious Basterds',
writer: 'Quentin Tarantino',
year : '2009',
actors :[ 
'Brad Pitt',
'Diane Kruger',
'Eli Roth']
})


db.movies.insertOne({title: 'Pulp Fiction',writer:'Quentin Tarantino',year : '1994',actors: ['John Travolta', 'Uma Thurman' ]})


db.movies.insertMany([
{title:'The Hobbit: An Unexpected Journey',
writer: 'J.R.R. Tolkein',
year: '2012',
franchise : 'The Hobbit'},
{title : 'The Hobbit: The Desolation of Smaug', 
writer : 'J.R.R. Tolkein',
year : '2013',
franchise : 'The Hobbit'}
])

db.movies.insertMany([
{title : 'The Hobbit: The Battle of the Five Armies',
writer : 'J.R.R. Tolkein',
year : '2012',
franchise : 'The Hobbit',
synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
},
{title : "Pee Wee Herman's Big Adventure"
},
{title : 'Avatar'
}
])

db.movies.find({writer :'Quentin Tarantino'})

db.movies.find({actors :'Brad Pitt'})


db.movies.find({franchise :'The Hobbit'})

db.movies.updateOne({ title: 'The Hobbit: An Unexpected Journey' },{$set: { synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

db.movies.updateOne({ title: 'The Hobbit: The Desolation of Smaug' },{$set: { synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})


db.movies.updateOne({ title: 'Pulp Fiction' },{$set: { actors: ['Samuel L. Jackson']} })


db.movies.find({year: {$gt : '1989' ,$lt :'2000'}})

db.movies.find({$or : 
[
{year: {$gt : '2010'}} ,{year:{$lt :'2000'}}
]
}
)

db.movies.find( { $synopsis: { $search: "Bilbo" } } )


to search for something create text index and then search 
 creating text index : db.movies.createIndex({synopsis:"text"})
doing the search:
db.movies.find({$text:{$search:"Bilbo"}}).pretty()

db.movies.find({$text:{$search:"Gandalf"}}).pretty()

db.movies.aggregate([ {$match :{$and : [{$eq = 'm

db.movies.find({$text:$search:"Gandalf"}}).pretty()

 db.movies.find({$text:{$search:"Bilbo -Gandalf"}}).pretty()

db.movies.find({$text:{$search:"dwarves |hobbit"}}).pretty()





--------------------------------
db.movies.insertMany([
  {
    title: 'Fight Club',
    writer: 'Chuck Palahniuko',
    year: '1999',
    actors: [ 'Brad Pit', 'Edward Norton' ]
  },
  {
    title: 'Pulp Fiction',
    writer: 'Quentin Tarantino',
    year: '1994',
    actors: [ 'Samuel L. Jackson','John Travolta','Uma Thurman' ]
  },
  {
    title: 'Inglorious Basterds',
    writer: 'Quentin Tarantino',
    year: '2009',
    actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ]
  },
  {
    title: 'The Hobbit: An Unexpected Journey',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synopsis: 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.'
  },
  {
    title: 'The Hobbit: The Desolation of Smaug',
    writer: 'J.R.R. Tolkein',
    year: '2013',
    franchise: 'The Hobbit',
    synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.'
  },
  {
    title: 'The Hobbit: The Battle of the Five Armies',
    writer: 'J.R.R. Tolkein',
    year: '2012',
    franchise: 'The Hobbit',
    synopsis: 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.'
  },
  {
    title: "Pee Wee Herman's Big Adventure"
  },
  {title: 'Avatar' }
])

db.users.insertMany([{
username : 'GoodGuyGreg',
first_name : "Good Guy",
last_name : "Greg"},
{
username : 'ScumbagSteve',
full_name : {first : "Scumbag", last : "Steve"
}
}
])


db.posts.insertMany([
{
username : 'GoodGuyGreg',
title : 'Passes out at party',
body : 'Wakes up early and cleans house'
},
{
username : 'GoodGuyGreg',
 title : 'Steals your identity',
 body : 'Raises your credit score' 
},
{
username : 'GoodGuyGreg',
 title : 'Reports a bug in your code',
 body : 'Sends you a Pull Request' 
},
{
username : 'ScumbagSteve',
title : 'Borrows something', 
body : 'Sells it'
},
{
 username : 'ScumbagSteve', 
title : 'Borrows everything', 
body : 'The end' 
},
{
username : 'ScumbagSteve', 
title : 'Forks your repo on github', 
body : 'Sets to private'
}])

COLLECTION POSTS WITH OBJECT ID
[
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed0"),
    username: 'GoodGuyGreg',
    title: 'Passes out at party',
    body: 'Wakes up early and cleans house'
  },
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed1"),
    username: 'GoodGuyGreg',
    title: 'Steals your identity',
    body: 'Raises your credit score'
  },
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed2"),
    username: 'GoodGuyGreg',
    title: 'Reports a bug in your code',
    body: 'Sends you a Pull Request'
  },
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed3"),
    username: 'ScumbagSteve',
    title: 'Borrows something',
    body: 'Sells it'
  },
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed4"),
    username: 'ScumbagSteve',
    title: 'Borrows everything',
    body: 'The end'
  },
  {
    _id: ObjectId("6127f49b733f4c874c7c0ed5"),
    username: 'ScumbagSteve',
    title: 'Forks your repo on github',
    body: 'Sets to private'
  }
]

---------------------------------------------------------------

[
  {
    _id: ObjectId("6127f972733f4c874c7c0ed6"),
    username: 'GoodGuyGreg',
    comment: 'Hope you got a good deal!',
    post: ObjectId("6127f49b733f4c874c7c0ed3")
  },
  {
    _id: ObjectId("6127f972733f4c874c7c0ed7"),
    username: 'GoodGuyGreg',
    comment: "What's mine is yours!",
    post: ObjectId("6127f49b733f4c874c7c0ed4")
  },
  {
    _id: ObjectId("6127f972733f4c874c7c0ed8"),
    username: 'GoodGuyGreg',
    comment: "Don't violate the licensing agreement!",
    post: ObjectId("6127f49b733f4c874c7c0ed5")
  },
  {
    _id: ObjectId("6127f972733f4c874c7c0ed9"),
    username: 'ScumbagSteve',
    comment: "It still isn't clean",
    post: ObjectId("6127f49b733f4c874c7c0ed0")
  },
  {
    _id: ObjectId("6127f972733f4c874c7c0eda"),
    username: 'ScumbagSteve',
    comment: 'Denied your PR cause I found a hack',
    post: ObjectId("6127f49b733f4c874c7c0ed2")
  }
]

----------------------------------------------------
without ID tag


db.comments.insertMany([
{
username: 'GoodGuyGreg',
comment: 'Hope you got a good deal!',
post: ObjectId("6127f49b733f4c874c7c0ed3")
},
{
username: 'GoodGuyGreg', 
comment: "What's mine is yours!",
post: ObjectId("6127f49b733f4c874c7c0ed4")
},
{
username: 'GoodGuyGreg',
comment: "Don't violate the licensing agreement!",
post: ObjectId("6127f49b733f4c874c7c0ed5")
},
{
username: 'ScumbagSteve',
comment: "It still isn't clean",
post: ObjectId("6127f49b733f4c874c7c0ed0")
},
{
username: 'ScumbagSteve',
comment: 'Denied your PR cause I found a hack',
post: ObjectId("6127f49b733f4c874c7c0ed2")
}
]

-----------------------------------------------------------
db.posts.find({username: 'GoodGuyGreg'}).pretty()

db.comments.find({username: 'GoodGuyGreg'}).pretty()


db.comments.find({username: 'ScumbagSteve'}).pretty()



db.comments.find({post:"Reports a bug in your code"}).pretty()




 db.posts.aggregate([ { $match: { title: 'Reports a bug in your code' } },
 { $lookup: { from: 'comments', localField: '_id', foreignField: 'post', 
as: 'comments' } }]). pretty()

-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------

2nd Assignment:

------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------


db.zipcodes.find({city: 'ATLANTA'})
db.zipcodes.find({city: 'ATLANTA'}).count()--- this counts no of documents named  atlanta 
db.zipcodes.aggregate({$match :{city:'ATLANTA'}})
db.zipcodes.find({city: 'ATLANTA'}).limit(2)

Example codes:
db.posts.find({$or:[{},{},{}]})------- OR Fucntion syntax
db.posts.find().count()--------------- to COUNT the documents 
db.posts.update({title:'blog2'},{$inc: {likes :100}})----adds new field likes 
db.posts.update({title:'blog2'},{$inc: {likes :1}})---- increments that 100 to 101
db.posts.update({title:'blog2"},{$rename: {'likes': 'views'}}) --- here likes is renamed to views 

db.posts.remove({title:'blog5'})--- removes only title field from that document

db.posts.find({comments : { $elemMatch : {user : 'akhila}}}).pretty()---- searches the sub document comment for specific user/(field or value)



db.zipcodes.find({city: 'ATLANTA'}).limit(2)----- so this code here displays only 2 city named atlanta 

db.zipcodes.find().forEach(function(doc){print(doc.city)})------- shows all the city field in the documents
AMBLER
CHALKYITSIK
NUIQSUT
JUNEAU
ANGOON
DOUGLAS
GUSTAVUS
HAINES
HOONAH
PETERSBURG
SITKA
SKAGWAY
KETCHIKAN
THORNE BAY
CRAIG
HYDABURG
HYDER
KLAWOCK
METLAKATLA
POINT BAKER
WRANGELL
KETCHIKAN



db.zipcodes.find({},{ 'city':1 })

db.zipcodes.aggregate([{$sort: {_id:1}])


db.zipcodes.aggregate([
{$match: {city:"ATLANTA"}},
{$group:{_id:"$_id"}},
{$sort:{_id:1}},
{$count:"total zip in ATLANTA"}])


db.zipcodes.aggregate([{$group:{_id:"$state", tot_pop: {$sum:"$pop"}}}])

db.zipcodes.aggregate([{$group:{_id:"$state", tot_pop: {$sum:"$pop"}}},{$sort: {tot_pop:1}}])

db.zipcodes.aggregate([{$group:{_id:"$state", tot_pop: {$sum:"$pop"}}},{$sort: {tot_pop:-1}},{$limit: 3}])


 db.zipcodes.aggregate([{$group:{_id:{city:"$city",state:"$state"}, tot_pop: {$sum:"$pop"}}},{$sort: {tot_pop:-1}},{$limit: 3}])


  db.zipcodes.aggregate([{$group:{_id:{city:"$city",state:"$state"}, tottot_pop: {$sum:"$pop"}}}])

db.zipcodes.aggregate([{$match: {$state:"TX"}},{$group:{_id:{city:"$city",state:"$state"}, tot_pop: {$sum:"$pop"}}},
{$sort: {tot_pop:-1}},{$limit: 3}])

db.zipcodes.aggregate([
	{$group:{_id:{city:"$city"}, avg_pop:{$avg:"$pop"}}}
	])

2.db.zipcodes.aggregate([
	{$group:{_id:"$state", avg_pop:{$avg:"$pop"}}},
	{$sort:{avg_pop : -1}},
	{$limit:3}
	])


 



------------------------------------------------------------------------------------


ASSIGNMENT 3

--------------------

1.
db.addresses.find().pretty()

2.
 db.addresses.find({},{"_id" :0,"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

3.
 db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

4.
db.addresses.find({},{"_id" :0,"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode":1}).pretty();

5.
db.addresses.aggregate([{$match:{borough: 'Bronx'}},{$limit :5}]).pretty()

6.
db.addresses.aggregate([{$match:{borough: 'Bronx'}}]).pretty()

7.
db.addresses.aggregate([{$match:{borough: 'Bronx'}},{$skip:5},{$limit :5}]).pretty()

8.
db.addresses.aggregate([{$match:{"grades.score":{$gt :90}}}])

9.
db.addresses.aggregate([{$match:{"grades.score":{$gt :80, $lt:100}}}])

10.
db.addresses.aggregate([{$match:{"address.coord" : {$lt : -95.754168}}}])

11.
 db.addresses.find( { $and: [ 
{ "cuisine": { $ne: "American " } },
 { "grades.score": { $gt: 70 } }, 
{ "address.coord": { $lt: -65.754168 } }] });


12.
db.addresses.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "grades.score" :{$gt: 70},
                             "address.coord" : {$lt : -65.754168}
                            }
                     );


13.
 db.addresses.aggregate([{$match:{ "cuisine" : {$ne : "American "}, "grades.grade" :"A", "borough": {$ne : "Brooklyn"}} } ,{$sort:{"cuisine":-1}}])


14.
db.addresses.find( { name: /^Wil/ }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })


15.
db.addresses.find( { name: /ces$/ }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })

16.
 db.addresses.find( { name: /.*Res.*/ }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })

17.
 db.addresses.find( { "borough": "Bronx", $or: [ { "cuisine": "American " }, { "cuisine": "Chinese" }] })

18.
 db.addresses.find( { "borough": { $in: ["Staten Island", "Queens", "Bronx", "Brooklyn"] } }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })


19.
 db.addresses.find( { "borough": { $nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"] } }, { "_id":0, "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })

20.erroorrr
 db.addresses.aggregate([$project{"restaurant_id": 1,"name":1,"borough":1,"cuisine":1,"_id":0}].{$match:{"grades.score":{$lte :10}}}])

21.
db.addresses.find( { $or: [ { name: /^Wil/ }, { "$and": [ { "cuisine": { $ne: "American " } }, { "cuisine": { $ne: "Chinees" } }] }] }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1 })

22.
 db.addresses.find( { "grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade": "A", "grades.score": 11 }, { "restaurant_id": 1, "name": 1, "grades": 1 })

23.
db.addresses.find( { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade": "A", "grades.1.score": 9 }, { "_id": 0, "restaurant_id": 1, "name": 1, "grades": 1 })

24.
db.addresses.aggregate([{ $match: { "address.coord.1": { $gt: 42, $lte: 52 } } }]). pretty()

25.
db.addresses.aggregate([{$sort:{ name:1}}])

26.
db.addresses.aggregate([{$sort:{ name:-1}}])

27.
db.addresses.aggregate([{$sort:{ cuisine:1, borough:-1}}])

28.
db.addresses.aggregate([{$match:{"address.street":{$exists :true}}}])

29.


30.
db.addresses.find( { "grades.score": { $mod: [7, 0] } }, { "restaurant_id": 1, "name": 1, "grades": 1 });

31.
db.addresses.aggregate([{$match:{name :{ $regex : ".*mon.*"}}}])

32.

